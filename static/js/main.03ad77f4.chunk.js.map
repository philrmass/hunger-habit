{"version":3,"sources":["styles/WeightInput.module.css","styles/Weights.module.css","styles/Averages.module.css","styles/Graph.module.css","components/Averages.js","components/Graph.js","components/WeightInput.js","components/Weights.js","components/App.js","utilities/storage.js","serviceWorker.js","index.js"],"names":["module","exports","inputBox","label","input","weights","box","values","title","main","thing","Averages","_ref","years","date","Date","react_default","a","createElement","className","styles","map","year","key","monthAves","slice","reverse","ave","index","concat","setMonth","toLocaleString","month","toFixed","monthStdDevs","Weights","WeightInput","saveWeight","_useState","useState","_useState2","Object","slicedToArray","value","setValue","day","weekday","time","hour","minute","id","type","min","max","step","onChange","e","target","onKeyUp","keyCode","deleteWeight","react","weight","onClick","buildWeight","stdDevMonths","averages","sums","Array","from","counts","forEach","diff","parseInt","sum","Math","sqrt","App","_useLocalStorage","initialValue","stored","window","localStorage","getItem","JSON","parse","err","console","error","setItem","stringify","useEffect","useLocalStorage","_useLocalStorage2","setWeights","setYears","sortedWeights","sort","b","yearsObj","reduce","getFullYear","getMonth","push","averaged","aves","averageMonths","components_WeightInput","toConsumableArray","now","components_Weights","filter","components_Averages","Graph","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03ad77f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBox\":\"WeightInput_inputBox__chyph\",\"label\":\"WeightInput_label__1eYzl\",\"input\":\"WeightInput_input__1TNok\",\"weights\":\"WeightInput_weights__2DdLt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Weights_box__2JWc0\",\"values\":\"Weights_values__22XK3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Averages_box__26Sjt\",\"title\":\"Averages_title__Bq3Kd\",\"values\":\"Averages_values__2H5Qh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Graph_main__2RKkZ\",\"thing\":\"Graph_thing__RrQXJ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Averages.module.css';\n\n\nfunction Averages({ weights, years }) {\n  const date = new Date();\n\n  return (\n    <section className='averagesSection'>\n      <div className={styles.title}>\n        Averages\n      </div>\n      <ul>\n        { years.map((year) => (\n          <li key={year}>\n            {year.year}\n            <ul>\n              { year.monthAves.slice(0).reverse().map((ave, index) =>\n                ((ave !== 0) &&\n                  <li key={`${year}-${index}`} className='average'>\n                    <div>\n                      {(new Date(date.setMonth(11 - index))).toLocaleString('en', { month: 'long' })}\n                    </div>\n                    <div>\n                      {ave.toFixed(1)}\n                    </div>\n                    <div>\n                      ({year.monthStdDevs[11 - index].toFixed(1)})\n                    </div>\n                  </li>\n                ))}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nAverages.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n  years: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Averages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Graph.module.css';\n\n\nfunction Weights({ weights }) {\n  return (\n    <section className='graphSection'>\n      <div className={styles.thing}>\n      </div>\n    </section>\n  );\n}\n\nWeights.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Weights;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/WeightInput.module.css';\n\n\nfunction WeightInput({ saveWeight }) {\n  const [value, setValue] = useState('');\n  const date = new Date();\n  const dayOptions = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };\n  const timeOptions = { hour: 'numeric', minute: '2-digit' };\n  const day = date.toLocaleString('en-us', dayOptions);\n  const time = date.toLocaleString('en-us', timeOptions);\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  function handleKeyUp(e) {\n    if (e.keyCode === 13) {\n      saveWeight(value);\n      setValue('');\n    }\n  }\n\n  return (\n    <section className='weightInputSection'>\n      <div className={styles.inputBox}>\n        <div className={styles.label}>\n          Add Current Weight\n        </div>\n        <div className={styles.input}>\n          <div>\n            <input\n              id='yo'\n              type='number'\n              min='0'\n              max='1000'\n              step='0.1'\n              value={value}\n              onChange={handleChange}\n              onKeyUp={handleKeyUp}\n            />\n          </div>\n          <div>\n            <div>{day}</div>\n            <div>{time}</div>\n          </div>\n          <div></div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nWeightInput.propTypes = {\n  saveWeight: PropTypes.func,\n};\n\nexport default WeightInput;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Weights.module.css';\n\n\nfunction Weights({ weights, deleteWeight }) {\n  function buildWeight(value) {\n    const date = new Date(value.time);\n    const dayOptions = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };\n    const timeOptions = { hour: 'numeric', minute: '2-digit' };\n    const day = date.toLocaleString('en-us', dayOptions);\n    const time = date.toLocaleString('en-us', timeOptions);\n\n    return (\n      <Fragment key={value.time}>\n        <div className='weight'>\n          {value.weight}\n        </div>\n        <div className='time'>\n          <div>\n            {day}\n          </div>\n          <div>\n            {time}\n          </div>\n        </div>\n        <div>\n          <button onClick={() => deleteWeight(value.time)}>\n            X\n          </button>\n        </div>\n      </Fragment>\n    );\n  }\n\n  return (\n    <section className='weightsSection'>\n      <div className={styles.box}>\n        <div className={styles.values}>\n          { weights.slice(0).reverse().map((value) => buildWeight(value)) }\n        </div>\n      </div>\n    </section>\n  );\n}\n\nWeights.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n  deleteWeight: PropTypes.func,\n};\n\nexport default Weights;\n","import React, { useEffect, useState } from 'react';\nimport { useLocalStorage } from '../utilities/storage';\nimport Averages from './Averages';\nimport Graph from './Graph';\nimport WeightInput from './WeightInput';\nimport Weights from './Weights';\n\n\nfunction averageMonths(weights) {\n  const aves = Array.from(Array(12), () => 0);\n  const counts = Array.from(Array(12), () => 0);\n  weights.forEach((weight) => {\n    aves[weight.month] += parseInt(weight.weight, 10);\n    counts[weight.month]++;\n  });\n  return aves.map((ave, index) => counts[index] === 0 ? 0 : (ave / counts[index]));\n}\n\nfunction stdDevMonths(weights, averages) {\n  const sums = Array.from(Array(12), () => 0);\n  const counts = Array.from(Array(12), () => 0);\n  weights.forEach((weight) => {\n    const diff = parseInt(weight.weight, 10) - averages[weight.month];\n    sums[weight.month] += (diff * diff);\n    counts[weight.month]++;\n  });\n  const y = sums.map((sum, index) => counts[index] === 0 ? 0 : Math.sqrt(sum / counts[index]));\n  return y;\n}\n\nfunction App() {\n  const [weights, setWeights] = useLocalStorage('weights', []);\n  const [years, setYears] = useState([]);\n\n  useEffect(() => {\n    const sortedWeights = weights.sort((a, b) => a.time - b.time);\n    setWeights(sortedWeights);\n\n    const yearsObj = weights.reduce((years, weight) => {\n      const date = new Date(weight.time);\n      const year = date.getFullYear();\n      const month = date.getMonth();\n      if (!years[year]) {\n        years[year] = {\n          year,\n          weights: [],\n        };\n      }\n      years[year].weights.push({ month, weight: weight.weight });\n      return years;\n    }, {});\n    const sorted = Object.values(yearsObj).sort((a, b) => a.year - b.year);\n    const averaged = sorted.map((year) => {\n      const monthAves = averageMonths(year.weights);\n      return {\n        year: year.year,\n        monthAves,\n        monthStdDevs: stdDevMonths(year.weights, monthAves),\n      };\n    });\n    setYears(averaged);\n  }, [weights]);\n\n  function saveWeight(value) {\n    setWeights([...weights, {\n      time: Date.now(),\n      weight: value,\n    }]);\n  }\n\n  function deleteWeight(time) {\n    setWeights(weights.filter((value) => value.time !== time));\n  }\n\n  return (\n    <main className='page'>\n      <WeightInput\n        saveWeight={saveWeight}\n      />\n      <Weights\n        weights={weights}\n        deleteWeight={deleteWeight}\n      />\n      <Averages\n        weights={weights}\n        years={years}\n      />\n      <Graph\n        weights={weights}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  const [value, setValue] = useState(() => {\n    const stored = window.localStorage.getItem(key);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (err) {\n        console.error('localStorage error:', key, stored, err);\n      }\n    }\n    window.localStorage.setItem(key, JSON.stringify(initialValue));\n    return initialValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
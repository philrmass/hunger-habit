{"version":3,"sources":["components/App.js","utilities/storage.js","serviceWorker.js","index.js"],"names":["App","_useLocalStorage","key","initialValue","storedValue","localStorage","getItem","setItem","JSON","stringify","parse","_useState","useState","_useState2","Object","slicedToArray","value","setValue","updated","useLocalStorage","_useLocalStorage2","weights","setWeights","react_default","a","createElement","className","Date","toLocaleString","type","min","max","step","onKeyUp","e","keyCode","concat","toConsumableArray","time","now","weight","target","map","onClick","filter","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAiEeA,MA7Df,WAAe,IAAAC,ECFR,SAAyBC,EAAKC,GACnC,IAAIC,EAAcC,aAAaC,QAAQJ,GACnB,OAAhBE,GACFA,EAAcD,EACdE,aAAaE,QAAQL,EAAKM,KAAKC,UAAUN,KAEzCC,EAAcI,KAAKE,MAAMN,GANsB,IAAAO,EASvBC,mBAASR,GATcS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAS1CK,EAT0CH,EAAA,GASnCI,EATmCJ,EAAA,GAWjD,MAAO,CAACG,EAAO,SAACE,GACdD,EAASC,GACTb,aAAaE,QAAQL,EAAKM,KAAKC,UAAUS,MDVbC,CAAgB,UAAW,IAD5CC,EAAAN,OAAAC,EAAA,EAAAD,CAAAb,EAAA,GACNoB,EADMD,EAAA,GACGE,EADHF,EAAA,GAgBb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACdH,EAAAC,EAAAC,cAAA,WAASC,UAAU,eACjBH,EAAAC,EAAAC,cAAA,iCAGAF,EAAAC,EAAAC,cAAA,YACI,IAAIE,MAAQC,kBAEhBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEI,KAAK,SACLC,IAAI,IACJC,IAAI,OACJC,KAAK,MACLC,QA7BO,SAACC,GACD,KAAdA,EAAEC,SACHb,EAAU,GAAAc,OAAAtB,OAAAuB,EAAA,EAAAvB,CAAKO,GAAL,CAAc,CACtBiB,KAAMX,KAAKY,MACXC,OAAQN,EAAEO,OAAOzB,eA6BjBO,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACjBH,EAAAC,EAAAC,cAAA,wBAGAF,EAAAC,EAAAC,cAAA,YACIJ,EAAQqB,IAAI,SAAC1B,GAAD,OACZO,EAAAC,EAAAC,cAAA,OAAKvB,IAAKc,EAAMsB,MACdf,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UACbV,EAAMwB,QAETjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZ,IAAIC,KAAKX,EAAMsB,MAAOV,kBAE1BL,EAAAC,EAAAC,cAAA,UAAQkB,QAAS,kBArCTL,EAqC4BtB,EAAMsB,UApCtDhB,EAAWD,EAAQuB,OAAO,SAAC5B,GAAD,OAAWA,EAAMsB,OAASA,KADjC,IAACA,IAqCR,kBEzCIO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.08ddace3.chunk.js","sourcesContent":["import React from 'react';\nimport '../style/App.css';\nimport { useLocalStorage } from '../utilities/storage';\n\nfunction App() {\n  const [weights, setWeights] = useLocalStorage('weights', []);\n\n  const saveWeight = (e) => {\n    if(e.keyCode === 13) {\n      setWeights([...weights, {\n        time: Date.now(),\n        weight: e.target.value,\n      }]);\n    }\n  }\n\n  const deleteWeight = (time) => {\n    setWeights(weights.filter((value) => value.time !== time));\n  }\n\n  return (\n    <div className=\"page\">\n      <main className=\"weightMain\">\n        <section className=\"weightInput\">\n          <div>\n            Add Current Weight\n          </div>\n          <div>\n            {(new Date()).toLocaleString()}\n          </div>\n          <div>\n            <input \n              type=\"number\"\n              min=\"0\"\n              max=\"1000\"\n              step=\"0.1\"\n              onKeyUp={saveWeight}\n            />\n          </div>\n        </section>\n        <section className=\"weightValues\">\n          <header>\n            Values\n          </header>\n          <main>\n            { weights.map((value) => (\n              <div key={value.time}>\n                <span className=\"weight\">\n                  {value.weight}\n                </span>\n                <span className=\"time\">\n                  {(new Date(value.time)).toLocaleString()}\n                </span>\n                <button onClick={() => deleteWeight(value.time)}>\n                  Delete\n                </button>\n              </div>\n            ))}\n          </main>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  let storedValue = localStorage.getItem(key);\n  if (storedValue === null) {\n    storedValue = initialValue;\n    localStorage.setItem(key, JSON.stringify(initialValue));\n  } else {\n    storedValue = JSON.parse(storedValue);\n  }\n\n  const [value, setValue] = useState(storedValue);\n\n  return [value, (updated) => {\n    setValue(updated);\n    localStorage.setItem(key, JSON.stringify(updated));\n  }];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
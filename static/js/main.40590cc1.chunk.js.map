{"version":3,"sources":["components/App.js","utilities/storage.js","serviceWorker.js","index.js"],"names":["stdDevMonths","weights","averages","sums","Array","from","counts","forEach","weight","diff","parseInt","month","map","sum","index","Math","sqrt","App","_useLocalStorage","key","initialValue","storedValue","localStorage","getItem","setItem","JSON","stringify","parse","_useState","useState","_useState2","Object","slicedToArray","value","setValue","updated","useLocalStorage","_useLocalStorage2","setWeights","years","setYears","useEffect","sortedWeights","sort","a","b","time","yearsObj","reduce","date","Date","year","getFullYear","getMonth","push","averaged","values","monthAves","aves","ave","averageMonths","monthStdDevs","react_default","createElement","className","toLocaleString","type","min","max","step","onKeyUp","e","keyCode","concat","toConsumableArray","now","target","onClick","filter","setMonth","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40590cc1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../style/App.css';\nimport { useLocalStorage } from '../utilities/storage';\n\nfunction averageMonths(weights) {\n  const aves = Array.from(Array(12), () => 0);\n  const counts = Array.from(Array(12), () => 0);\n  weights.forEach((weight) => {\n    aves[weight.month] += parseInt(weight.weight);\n    counts[weight.month]++;\n  });\n  return aves.map((ave, index) => counts[index] === 0 ? 0 : (ave / counts[index]));\n}\n\nfunction stdDevMonths(weights, averages) {\n  const sums = Array.from(Array(12), () => 0);\n  const counts = Array.from(Array(12), () => 0);\n  weights.forEach((weight) => {\n    const diff = parseInt(weight.weight) - averages[weight.month];\n    sums[weight.month] += (diff * diff);\n    counts[weight.month]++;\n  });\n  const y = sums.map((sum, index) => counts[index] === 0 ? 0 : Math.sqrt(sum / counts[index]));\n  return y;\n}\n\nfunction App() {\n  const [weights, setWeights] = useLocalStorage('weights', []);\n  const [years, setYears] = useState([]);\n\n  useEffect(() => {\n    const sortedWeights = weights.sort((a, b) => a.time - b.time);\n    setWeights(sortedWeights);\n\n    const yearsObj = weights.reduce((years, weight) => {\n      const date = new Date(weight.time);\n      const year = date.getFullYear();\n      const month = date.getMonth();\n      if (!years[year]) {\n        years[year] = {\n          year,\n          weights: [],\n        };\n      }\n      years[year].weights.push({ month, weight: weight.weight });\n      return years;\n    }, {});\n    const sorted = Object.values(yearsObj).sort((a, b) => a.year - b.year);\n    const averaged = sorted.map((year) => {\n      const monthAves = averageMonths(year.weights);\n      return {\n        year: year.year,\n        monthAves,\n        monthStdDevs: stdDevMonths(year.weights, monthAves),\n      }\n    });\n    setYears(averaged);\n  }, [weights]);\n\n  function saveWeight(e) {\n    if(e.keyCode === 13) {\n      setWeights([...weights, {\n        time: Date.now(),\n        weight: e.target.value,\n      }]);\n    }\n  }\n\n  function deleteWeight(time) {\n    setWeights(weights.filter((value) => value.time !== time));\n  }\n\n  const date = new Date();\n  return (\n    <div className=\"page\">\n      <main className=\"weightMain\">\n        <section>\n          <div className=\"weightInput\">\n            <div>\n              Add Current Weight\n            </div>\n            <div>\n              {(new Date()).toLocaleString()}\n            </div>\n            <div>\n              <input \n                type=\"number\"\n                min=\"0\"\n                max=\"1000\"\n                step=\"0.1\"\n                onKeyUp={saveWeight}\n              />\n            </div>\n          </div>\n          <div className=\"weightValues\">\n            <header>\n              Values\n            </header>\n            <main>\n              { weights.map((value) => (\n                <div key={value.time}>\n                  <span className=\"weight\">\n                    {value.weight}\n                  </span>\n                  <span className=\"time\">\n                    {(new Date(value.time)).toLocaleString()}\n                  </span>\n                  <button onClick={() => deleteWeight(value.time)}>\n                    Delete\n                  </button>\n                </div>\n              ))}\n            </main>\n          </div>\n        </section>\n        <section>\n          <div>\n            Averages\n          </div>\n          <ul>\n            { years.map((year) => (\n              <li key={year}>\n                {year.year}\n                <ul>\n                  { year.monthAves.map((ave, index) => \n                    ((ave != 0) &&\n                    <li key={`${year}-${index}`} className='average'>\n                    <div>\n                      {(new Date(date.setMonth(index))).toLocaleString('en', { month: 'long' })}\n                    </div>\n                    <div>\n                      {ave.toFixed(1)}\n                    </div>\n                    <div>\n                      ({year.monthStdDevs[index].toFixed(1)})\n                    </div>\n                  </li>\n                  ))}\n                </ul>\n              </li>\n            ))}\n          </ul>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  let storedValue = localStorage.getItem(key);\n  if (storedValue === null) {\n    storedValue = initialValue;\n    localStorage.setItem(key, JSON.stringify(initialValue));\n  } else {\n    storedValue = JSON.parse(storedValue);\n  }\n\n  const [value, setValue] = useState(storedValue);\n\n  return [value, (updated) => {\n    setValue(updated);\n    localStorage.setItem(key, JSON.stringify(updated));\n  }];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
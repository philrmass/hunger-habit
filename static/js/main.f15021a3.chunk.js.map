{"version":3,"sources":["styles/Averages.module.css","styles/Weights.module.css","styles/WeightInput.module.css","styles/Graph.module.css","components/Averages.js","utilities/average.js","components/Graph.js","components/WeightInput.js","components/Weights.js","components/App.js","utilities/storage.js","serviceWorker.js","index.js"],"names":["module","exports","box","month","date","label","value","weight","time","deleteButton","title","input","Averages","_ref","weights","_useState","useState","_useState2","Object","slicedToArray","months","setMonths","Date","useEffect","months0","byMonth","reduce","year","getFullYear","getMonth","monthLabel","concat","slice","toConsumableArray","values","groupByMonth","months2","map","diffsSum","parseInt","average","sum","diff","stdDev","Math","sqrt","count","computeStdDevs","length","objectSpread","react_default","a","createElement","className","styles","reverse","key","setMonth","toLocaleString","toFixed","Weights","WeightInput","saveWeight","setValue","day","weekday","hour","minute","id","type","min","max","step","onChange","e","target","onKeyUp","keyCode","deleteWeight","onClick","buildWeight","App","_useLocalStorage","initialValue","stored","window","localStorage","getItem","JSON","parse","err","console","error","setItem","stringify","useLocalStorage","_useLocalStorage2","setWeights","components_WeightInput","now","components_Weights","filter","components_Averages","Graph","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,IAAA,sBAAAC,MAAA,wBAAAC,KAAA,uBAAAC,MAAA,wBAAAC,MAAA,2CCAlBN,EAAAC,QAAA,CAAkBC,IAAA,qBAAAI,MAAA,uBAAAC,OAAA,wBAAAC,KAAA,sBAAAC,aAAA,gDCAlBT,EAAAC,QAAA,CAAkBC,IAAA,yBAAAQ,MAAA,2BAAAC,MAAA,2BAAAH,KAAA,+CCAlBR,EAAAC,QAAA,CAAkBC,IAAA,uMC+DHU,MA1Df,SAAAC,GAA+B,IAAXC,EAAWD,EAAXC,QAAWC,EACDC,mBAAS,IADRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBK,EADsBH,EAAA,GACdI,EADcJ,EAAA,GAEvBb,EAAO,IAAIkB,KASjB,OAPAC,oBAAU,WACR,IAAMC,ECXH,SAAsBV,GAC3B,IAAMW,EAAUX,EAAQY,OAAO,SAACD,EAASlB,GACvC,IAAMH,EAAO,IAAIkB,KAAKf,EAAOC,MACvBmB,EAAOvB,EAAKwB,cACZzB,EAAQC,EAAKyB,WAAa,EAC1BC,EAAa,IAAAC,OAAI5B,GAAQ6B,MAAM,EAAG,GAClC3B,EAAK,GAAA0B,OAAMJ,EAAN,KAAAI,OAAcD,GAUzB,OARKL,EAAQpB,KACXoB,EAAQpB,GAAS,CACfsB,OACAxB,QACAW,QAAS,KAGbW,EAAQpB,GAAOS,QAAf,GAAAiB,OAAAb,OAAAe,EAAA,EAAAf,CAA6BO,EAAQpB,GAAOS,SAA5C,CAAqDP,IAC9CkB,GACN,IAEH,OAAOP,OAAOgB,OAAOT,GDRHU,CAAarB,GAEvBsB,ECsBH,SAAwBhB,GAC7B,OAAOA,EAAOiB,IAAI,SAAClC,GACjB,IACMmC,EADQnC,EAAMW,QAAQuB,IAAI,SAAC9B,GAAD,OAAYgC,SAAShC,EAAOA,OAAQ,IAAMJ,EAAMqC,UACzDd,OAAO,SAACe,EAAKC,GAAN,OAAeD,EAAOC,EAAOA,GAAO,GAC5DC,EAASC,KAAKC,KAAKP,EAAWnC,EAAM2C,OAC1C,MAAO,CACLnB,KAAMxB,EAAMwB,KACZxB,MAAOA,EAAMA,MACb2C,MAAO3C,EAAM2C,MACbN,QAASrC,EAAMqC,QACfG,YDhCcI,CADgBvB,ECWpBa,IAAI,SAAClC,GACjB,IAAMsC,EAAMtC,EAAMW,QAAQY,OAAO,SAACe,EAAKlC,GAAN,OAAiBkC,EAAMF,SAAShC,EAAOA,OAAQ,KAAK,GAC/EuC,EAAQ3C,EAAMW,QAAQkC,OACtBR,EAAUC,EAAMK,EACtB,OAAO5B,OAAA+B,EAAA,EAAA/B,CAAA,GACFf,EADL,CAEE2C,QACAN,eDhBFnB,EAAUe,IACT,CAACtB,IAGFoC,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOpD,KACrBgD,EAAAC,EAAAC,cAAA,UACGhC,EAAOY,MAAM,GAAGuB,UAAUlB,IAAI,SAAC/B,GAAD,OAC7B4C,EAAAC,EAAAC,cAAA,MAAII,IAAG,GAAAzB,OAAKzB,EAAMqB,KAAX,KAAAI,OAAmBzB,EAAMH,QAC9B+C,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOnD,OACrB+C,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOlD,MACnB,IAAIkB,KAAKlB,EAAKqD,SAASnD,EAAMH,MAAQ,IAAKuD,eAAe,KAAM,CAAEvD,MAAO,SAD5E,IACwFG,EAAMqB,MAE9FuB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOjD,OAAxB,WAGA6C,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOhD,OACrBA,EAAMkC,QAAQmB,QAAQ,KAG3BT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOjD,OAAxB,gBAGA6C,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOhD,OACrBA,EAAMwC,QAGXI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOjD,OAAxB,WAGA6C,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOhD,OACrBA,EAAMqC,OAAOgB,QAAQ,6BE9B3BC,MAbf,SAAA/C,GACE,OAD4BA,EAAXC,QAEfoC,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOpD,wBCkDd2D,MArDf,SAAAhD,GAAqC,IAAdiD,EAAcjD,EAAdiD,WAAc/C,EACTC,mBAAS,IADAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC5BT,EAD4BW,EAAA,GACrB8C,EADqB9C,EAAA,GAE7Bb,EAAO,IAAIkB,KAGX0C,EAAM5D,EAAKsD,eAAe,QAFb,CAAEO,QAAS,QAASD,IAAK,UAAW7D,MAAO,QAASwB,KAAM,YAGvEnB,EAAOJ,EAAKsD,eAAe,QAFb,CAAEQ,KAAM,UAAWC,OAAQ,YAe/C,OACEjB,EAAAC,EAAAC,cAAA,WAASC,UAAU,sBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOpD,KACrBgD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO5C,OAAvB,sBAGAwC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO3C,OACrBuC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEgB,GAAG,KACHC,KAAK,SACLC,IAAI,IACJC,IAAI,OACJC,KAAK,MACLlE,MAAOA,EACPmE,SA1BZ,SAAsBC,GACpBX,EAASW,EAAEC,OAAOrE,QA0BRsE,QAvBZ,SAAqBF,GACD,KAAdA,EAAEG,UACJf,EAAWxD,GACXyD,EAAS,SAuBLb,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO9C,MACrB0C,EAAAC,EAAAC,cAAA,WAAMY,GACNd,EAAAC,EAAAC,cAAA,WAAM5C,IAER0C,EAAAC,EAAAC,cAAA,gCCKKQ,MA/Cf,SAAA/C,GAA4C,IAAzBC,EAAyBD,EAAzBC,QAASgE,EAAgBjE,EAAhBiE,aAiC1B,OACE5B,EAAAC,EAAAC,cAAA,WAASC,UAAU,kBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOpD,KACnBY,EAAQkB,MAAM,GAAGuB,UAAUlB,IAAI,SAAC/B,GAAD,OAnCvC,SAAqBA,GACnB,IAAMF,EAAO,IAAIkB,KAAKhB,EAAME,MAGtBwD,EAAM5D,EAAKsD,eAAe,QAFb,CAAEO,QAAS,QAASD,IAAK,UAAW7D,MAAO,QAASwB,KAAM,YAGvEnB,EAAOJ,EAAKsD,eAAe,QAFb,CAAEQ,KAAM,UAAWC,OAAQ,YAI/C,OACEjB,EAAAC,EAAAC,cAAA,OAAKI,IAAKlD,EAAME,KAAM6C,UAAWC,IAAOhD,OACtC4C,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO/C,QACpBD,EAAMC,QAET2C,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO9C,MACrB0C,EAAAC,EAAAC,cAAA,WACGY,GAEHd,EAAAC,EAAAC,cAAA,WACG5C,IAGL0C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEC,UAAWC,IAAO7C,aAClBsE,QAAS,kBAAMD,EAAaxE,EAAME,QAFpC,OAc0CwE,CAAY1E,QCAjD2E,MAjCf,WAAe,IAAAC,ECNR,SAAyB1B,EAAK2B,GAAc,IAAApE,EACvBC,mBAAS,WACjC,IAAMoE,EAASC,OAAOC,aAAaC,QAAQ/B,GAC3C,GAAI4B,EACF,IACE,OAAOI,KAAKC,MAAML,GAClB,MAAOM,GACPC,QAAQC,MAAM,sBAAuBpC,EAAK4B,EAAQM,GAItD,OADAL,OAAOC,aAAaO,QAAQrC,EAAKgC,KAAKM,UAAUX,IACzCA,IAXwClE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC1CT,EAD0CW,EAAA,GACnC8C,EADmC9C,EAAA,GAkBjD,OAJAM,oBAAU,WACR8D,OAAOC,aAAaO,QAAQrC,EAAKgC,KAAKM,UAAUxF,KAC/C,CAACkD,EAAKlD,IAEF,CAACA,EAAOyD,GDXegC,CAAgB,UAAW,IAD5CC,EAAA9E,OAAAC,EAAA,EAAAD,CAAAgE,EAAA,GACNpE,EADMkF,EAAA,GACGC,EADHD,EAAA,GAcb,OACE9C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAAC8C,EAAD,CACEpC,WAdN,SAAoBxD,GAClB2F,EAAU,GAAAlE,OAAAb,OAAAe,EAAA,EAAAf,CAAKJ,GAAL,CAAc,CACtBN,KAAMc,KAAK6E,MACX5F,OAAQD,SAaR4C,EAAAC,EAAAC,cAACgD,EAAD,CACEtF,QAASA,EACTgE,aAXN,SAAsBtE,GACpByF,EAAWnF,EAAQuF,OAAO,SAAC/F,GAAD,OAAWA,EAAME,OAASA,QAYlD0C,EAAAC,EAAAC,cAACkD,EAAD,CACExF,QAASA,IAEXoC,EAAAC,EAAAC,cAACmD,EAAD,CACEzF,QAASA,MEvBG0F,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f15021a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Averages_box__26Sjt\",\"month\":\"Averages_month__25tZa\",\"date\":\"Averages_date__3Y9ER\",\"label\":\"Averages_label__lNs6N\",\"value\":\"Averages_value__3X4k2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Weights_box__2JWc0\",\"value\":\"Weights_value__3DwNj\",\"weight\":\"Weights_weight__1ufNe\",\"time\":\"Weights_time__35D-9\",\"deleteButton\":\"Weights_deleteButton__2Keu2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"WeightInput_box__3Ps7C\",\"title\":\"WeightInput_title__1J5ME\",\"input\":\"WeightInput_input__1TNok\",\"time\":\"WeightInput_time__33S0W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Graph_box__3lZbO\"};","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Averages.module.css';\nimport { groupByMonth, computeAverages, computeStdDevs } from '../utilities/average';\n\n\nfunction Averages({ weights }) {\n  const [months, setMonths] = useState([]);\n  const date = new Date();\n\n  useEffect(() => {\n    const months0 = groupByMonth(weights);\n    const months1 = computeAverages(months0);\n    const months2 = computeStdDevs(months1);\n    setMonths(months2);\n  }, [weights]);\n\n  return (\n    <section className='averagesSection'>\n      <div className={styles.box}>\n        <ul>\n          {months.slice(0).reverse().map((value) => (\n            <li key={`${value.year}_${value.month}`}>\n              <div className={styles.month}>\n                <div className={styles.date}>\n                  {(new Date(date.setMonth(value.month - 1))).toLocaleString('en', { month: 'long' })} {value.year}\n                </div>\n                <div>\n                  <span className={styles.label}>\n                    Average\n                  </span>\n                  <span className={styles.value}>\n                    {value.average.toFixed(1)}\n                  </span>\n                </div>\n                <div>\n                  <span className={styles.label}>\n                    Measurements\n                  </span>\n                  <span className={styles.value}>\n                    {value.count}\n                  </span>\n                </div>\n                <div>\n                  <span className={styles.label}>\n                    Std Dev\n                  </span>\n                  <span className={styles.value}>\n                    {value.stdDev.toFixed(1)}\n                  </span>\n                </div>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  );\n}\n\nAverages.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Averages;\n","export function groupByMonth(weights) {\n  const byMonth = weights.reduce((byMonth, weight) => {\n    const date = new Date(weight.time);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const monthLabel = `0${month}`.slice(0, 2);\n    const label = `${year}_${monthLabel}`;\n\n    if (!byMonth[label]) {\n      byMonth[label] = {\n        year,\n        month,\n        weights: [],\n      };\n    }\n    byMonth[label].weights = [...byMonth[label].weights, weight];\n    return byMonth;\n  }, {});\n\n  return Object.values(byMonth);\n}\n\nexport function computeAverages(months) {\n  return months.map((month) => {\n    const sum = month.weights.reduce((sum, weight) => sum + parseInt(weight.weight, 10), 0);\n    const count = month.weights.length;\n    const average = sum / count;\n    return {\n      ...month,\n      count,\n      average,\n    };\n  });\n}\n\nexport function computeStdDevs(months) {\n  return months.map((month) => {\n    const diffs = month.weights.map((weight) => parseInt(weight.weight, 10) - month.average);\n    const diffsSum = diffs.reduce((sum, diff) => sum + (diff * diff), 0);\n    const stdDev = Math.sqrt(diffsSum / month.count);\n    return {\n      year: month.year,\n      month: month.month,\n      count: month.count,\n      average: month.average,\n      stdDev,\n    };\n  });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Graph.module.css';\n\n\nfunction Weights({ weights }) {\n  return (\n    <section className='graphSection'>\n      <div className={styles.box}>\n      </div>\n    </section>\n  );\n}\n\nWeights.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Weights;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/WeightInput.module.css';\n\n\nfunction WeightInput({ saveWeight }) {\n  const [value, setValue] = useState('');\n  const date = new Date();\n  const dayOptions = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };\n  const timeOptions = { hour: 'numeric', minute: '2-digit' };\n  const day = date.toLocaleString('en-us', dayOptions);\n  const time = date.toLocaleString('en-us', timeOptions);\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  function handleKeyUp(e) {\n    if (e.keyCode === 13) {\n      saveWeight(value);\n      setValue('');\n    }\n  }\n\n  return (\n    <section className='weightInputSection'>\n      <div className={styles.box}>\n        <div className={styles.title}>\n          Add Current Weight\n        </div>\n        <div className={styles.input}>\n          <div>\n            <input\n              id='yo'\n              type='number'\n              min='0'\n              max='1000'\n              step='0.1'\n              value={value}\n              onChange={handleChange}\n              onKeyUp={handleKeyUp}\n            />\n          </div>\n          <div className={styles.time}>\n            <div>{day}</div>\n            <div>{time}</div>\n          </div>\n          <div></div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nWeightInput.propTypes = {\n  saveWeight: PropTypes.func,\n};\n\nexport default WeightInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Weights.module.css';\n\n\nfunction Weights({ weights, deleteWeight }) {\n  function buildWeight(value) {\n    const date = new Date(value.time);\n    const dayOptions = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };\n    const timeOptions = { hour: 'numeric', minute: '2-digit' };\n    const day = date.toLocaleString('en-us', dayOptions);\n    const time = date.toLocaleString('en-us', timeOptions);\n\n    return (\n      <div key={value.time} className={styles.value}>\n        <div className={styles.weight}>\n          {value.weight}\n        </div>\n        <div className={styles.time}>\n          <div>\n            {day}\n          </div>\n          <div>\n            {time}\n          </div>\n        </div>\n        <div>\n          <button\n            className={styles.deleteButton}\n            onClick={() => deleteWeight(value.time)}\n          >\n            X\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <section className='weightsSection'>\n      <div className={styles.box}>\n        { weights.slice(0).reverse().map((value) => buildWeight(value)) }\n      </div>\n    </section>\n  );\n}\n\nWeights.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n  deleteWeight: PropTypes.func,\n};\n\nexport default Weights;\n","import React from 'react';\nimport { useLocalStorage } from '../utilities/storage';\nimport Averages from './Averages';\nimport Graph from './Graph';\nimport WeightInput from './WeightInput';\nimport Weights from './Weights';\n\n\nfunction App() {\n  const [weights, setWeights] = useLocalStorage('weights', []);\n\n  function saveWeight(value) {\n    setWeights([...weights, {\n      time: Date.now(),\n      weight: value,\n    }]);\n  }\n\n  function deleteWeight(time) {\n    setWeights(weights.filter((value) => value.time !== time));\n  }\n\n  return (\n    <main className='page'>\n      <WeightInput\n        saveWeight={saveWeight}\n      />\n      <Weights\n        weights={weights}\n        deleteWeight={deleteWeight}\n      />\n      <Averages\n        weights={weights}\n      />\n      <Graph\n        weights={weights}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  const [value, setValue] = useState(() => {\n    const stored = window.localStorage.getItem(key);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (err) {\n        console.error('localStorage error:', key, stored, err);\n      }\n    }\n    window.localStorage.setItem(key, JSON.stringify(initialValue));\n    return initialValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Averages.js","components/Graph.js","components/Weights.js","components/Weight.js","components/App.js","utilities/storage.js","serviceWorker.js","index.js","styles/Weight.module.css"],"names":["Averages","_ref","weights","years","date","Date","react_default","a","createElement","className","map","year","key","monthAves","slice","reverse","ave","index","concat","setMonth","toLocaleString","month","toFixed","monthStdDevs","Weights","deleteWeight","value","time","day","weekday","hour","minute","react","weight","onClick","buildWeight","Weight","saveWeight","_useState","useState","_useState2","Object","slicedToArray","setValue","styles","inputBox","label","input","id","type","min","max","step","onChange","e","target","onKeyUp","keyCode","components_Weights","stdDevMonths","averages","sums","Array","from","counts","forEach","diff","parseInt","sum","Math","sqrt","App","_useLocalStorage","initialValue","stored","window","localStorage","getItem","JSON","parse","err","console","error","setItem","stringify","useEffect","useLocalStorage","_useLocalStorage2","setWeights","setYears","sortedWeights","sort","b","yearsObj","reduce","getFullYear","getMonth","push","averaged","values","aves","averageMonths","components_Weight","toConsumableArray","now","filter","components_Averages","Graph","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6a676430.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction Averages({ weights, years }) {\n  const date = new Date();\n\n  return (\n    <section className='averages'>\n      <div>\n        Averages\n      </div>\n      <ul>\n        { years.map((year) => (\n          <li key={year}>\n            {year.year}\n            <ul>\n              { year.monthAves.slice(0).reverse().map((ave, index) =>\n                ((ave !== 0) &&\n                  <li key={`${year}-${index}`} className='average'>\n                    <div>\n                      {(new Date(date.setMonth(11 - index))).toLocaleString('en', { month: 'long' })}\n                    </div>\n                    <div>\n                      {ave.toFixed(1)}\n                    </div>\n                    <div>\n                      ({year.monthStdDevs[11 - index].toFixed(1)})\n                    </div>\n                  </li>\n                ))}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nAverages.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n  years: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Averages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Weights({ weights }) {\n  return (\n    <section className='graph'>\n    </section>\n  );\n}\n\nWeights.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Weights;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction Weights({ weights, deleteWeight }) {\n  function buildWeight(value) {\n    const date = new Date(value.time);\n    const dayOptions = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };\n    const timeOptions = { hour: 'numeric', minute: '2-digit' };\n    const day = date.toLocaleString('en-us', dayOptions);\n    const time = date.toLocaleString('en-us', timeOptions);\n\n    return (\n      <Fragment key={value.time}>\n        <div className='weight'>\n          {value.weight}\n        </div>\n        <div className='time'>\n          <div>\n            {day}\n          </div>\n          <div>\n            {time}\n          </div>\n        </div>\n        <div>\n          <button onClick={() => deleteWeight(value.time)}>\n            X\n          </button>\n        </div>\n      </Fragment>\n    );\n  }\n\n  return (\n    <section className='weights'>\n      <div className='weightValues'>\n        { weights.slice(0).reverse().map((value) => buildWeight(value)) }\n      </div>\n    </section>\n  );\n}\n\nWeights.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n  deleteWeight: PropTypes.func,\n};\n\nexport default Weights;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Weights from './Weights';\nimport styles from '../styles/Weight.module.css';\n\n\nfunction Weight({ weights, saveWeight, deleteWeight }) {\n  const [value, setValue] = useState('');\n  const date = new Date();\n  const dayOptions = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };\n  const timeOptions = { hour: 'numeric', minute: '2-digit' };\n  const day = date.toLocaleString('en-us', dayOptions);\n  const time = date.toLocaleString('en-us', timeOptions);\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  function handleKeyUp(e) {\n    if (e.keyCode === 13) {\n      saveWeight(value);\n      setValue('');\n    }\n  }\n\n  return (\n    <section className='weight'>\n      <div className={styles.inputBox}>\n        <div className={styles.label}>\n          Add Current Weight\n        </div>\n        <div className={styles.input}>\n          <div>\n            <input\n              id='yo'\n              type='number'\n              min='0'\n              max='1000'\n              step='0.1'\n              value={value}\n              onChange={handleChange}\n              onKeyUp={handleKeyUp}\n            />\n          </div>\n          <div>\n            <div>{day}</div>\n            <div>{time}</div>\n          </div>\n          <div></div>\n        </div>\n      </div>\n      <div className={styles.weights}>\n        <Weights\n          weights={weights}\n          deleteWeight={deleteWeight}\n        />\n      </div>\n    </section>\n  );\n}\n\nWeight.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n  saveWeight: PropTypes.func,\n  deleteWeight: PropTypes.func,\n};\n\nexport default Weight;\n","import React, { useEffect, useState } from 'react';\nimport { useLocalStorage } from '../utilities/storage';\nimport Averages from './Averages';\nimport Graph from './Graph';\nimport Weight from './Weight';\n\n\nfunction averageMonths(weights) {\n  const aves = Array.from(Array(12), () => 0);\n  const counts = Array.from(Array(12), () => 0);\n  weights.forEach((weight) => {\n    aves[weight.month] += parseInt(weight.weight, 10);\n    counts[weight.month]++;\n  });\n  return aves.map((ave, index) => counts[index] === 0 ? 0 : (ave / counts[index]));\n}\n\nfunction stdDevMonths(weights, averages) {\n  const sums = Array.from(Array(12), () => 0);\n  const counts = Array.from(Array(12), () => 0);\n  weights.forEach((weight) => {\n    const diff = parseInt(weight.weight, 10) - averages[weight.month];\n    sums[weight.month] += (diff * diff);\n    counts[weight.month]++;\n  });\n  const y = sums.map((sum, index) => counts[index] === 0 ? 0 : Math.sqrt(sum / counts[index]));\n  return y;\n}\n\nfunction App() {\n  const [weights, setWeights] = useLocalStorage('weights', []);\n  const [years, setYears] = useState([]);\n\n  useEffect(() => {\n    const sortedWeights = weights.sort((a, b) => a.time - b.time);\n    setWeights(sortedWeights);\n\n    const yearsObj = weights.reduce((years, weight) => {\n      const date = new Date(weight.time);\n      const year = date.getFullYear();\n      const month = date.getMonth();\n      if (!years[year]) {\n        years[year] = {\n          year,\n          weights: [],\n        };\n      }\n      years[year].weights.push({ month, weight: weight.weight });\n      return years;\n    }, {});\n    const sorted = Object.values(yearsObj).sort((a, b) => a.year - b.year);\n    const averaged = sorted.map((year) => {\n      const monthAves = averageMonths(year.weights);\n      return {\n        year: year.year,\n        monthAves,\n        monthStdDevs: stdDevMonths(year.weights, monthAves),\n      };\n    });\n    setYears(averaged);\n  }, [weights]);\n\n  function saveWeight(value) {\n    setWeights([...weights, {\n      time: Date.now(),\n      weight: value,\n    }]);\n  }\n\n  function deleteWeight(time) {\n    setWeights(weights.filter((value) => value.time !== time));\n  }\n\n  return (\n    <main className='page'>\n      <Weight\n        weights={weights}\n         saveWeight={saveWeight}\n         deleteWeight={deleteWeight}\n       />\n      <Averages\n        weights={weights}\n        years={years}\n      />\n      <Graph\n        weights={weights}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  const [value, setValue] = useState(() => {\n    const stored = window.localStorage.getItem(key);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (err) {\n        console.error('localStorage error:', key, stored, err);\n      }\n    }\n    window.localStorage.setItem(key, JSON.stringify(initialValue));\n    return initialValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBox\":\"Weight_inputBox__1WkK2\",\"label\":\"Weight_label__3jaH0\",\"input\":\"Weight_input__3wmjV\",\"weights\":\"Weight_weights__2fWgZ\"};"],"sourceRoot":""}
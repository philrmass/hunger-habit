{"version":3,"sources":["styles/WeightInput.module.css","styles/Averages.module.css","styles/Weights.module.css","styles/Graph.module.css","components/Averages.js","utilities/average.js","components/Graph.js","components/WeightInput.js","components/Weights.js","components/App.js","utilities/storage.js","serviceWorker.js","index.js"],"names":["module","exports","inputBox","label","input","weights","box","values","value","main","thing","Averages","_ref","_useState","years","useState","_useState2","Object","slicedToArray","averages","setAverages","date","Date","useEffect","months0","byMonth","reduce","weight","time","year","getFullYear","month","getMonth","monthLabel","concat","slice","toConsumableArray","groupByMonth","months2","months","map","diffsSum","parseInt","average","sum","diff","stdDev","Math","sqrt","count","computeStdDevs","length","objectSpread","react_default","a","createElement","className","styles","key","setMonth","toLocaleString","Weights","WeightInput","saveWeight","setValue","day","weekday","hour","minute","id","type","min","max","step","onChange","e","target","onKeyUp","keyCode","deleteWeight","reverse","react","onClick","buildWeight","stdDevMonths","sums","Array","from","counts","forEach","index","App","_useLocalStorage","initialValue","stored","window","localStorage","getItem","JSON","parse","err","console","error","setItem","stringify","useLocalStorage","_useLocalStorage2","setWeights","setYears","sortedWeights","sort","b","yearsObj","push","averaged","monthAves","aves","ave","averageMonths","monthStdDevs","components_WeightInput","now","components_Weights","filter","components_Averages","Graph","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed17b777.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBox\":\"WeightInput_inputBox__chyph\",\"label\":\"WeightInput_label__1eYzl\",\"input\":\"WeightInput_input__1TNok\",\"weights\":\"WeightInput_weights__2DdLt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Averages_box__26Sjt\",\"values\":\"Averages_values__2H5Qh\",\"value\":\"Averages_value__3X4k2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Weights_box__2JWc0\",\"values\":\"Weights_values__22XK3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Graph_main__2RKkZ\",\"thing\":\"Graph_thing__RrQXJ\"};","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Averages.module.css';\nimport { groupByMonth, computeAverages, computeStdDevs } from '../utilities/average';\n\n\nfunction Averages({ weights, years }) {\n  const [averages, setAverages] = useState([]);\n  const date = new Date();\n\n  useEffect(() => {\n    const months0 = groupByMonth(weights);\n    const months1 = computeAverages(months0);\n    const months2 = computeStdDevs(months1);\n    setAverages(months2);\n  }, [weights]);\n\n  return (\n    <section className='averagesSection'>\n      <div className={styles.box}>\n        <div className={styles.values}>\n          <ul>\n            {averages.map((value) => (\n              <li key={`${value.year}_${value.month}`}>\n                <div>\n                  {(new Date(date.setMonth(value.month - 1))).toLocaleString('en', { month: 'long' })}\n                </div>\n                <div>\n                  {value.year}\n                </div>\n                <div>\n                  {value.average}\n                </div>\n                <div>\n                  {value.stdDev}\n                </div>\n                <div>\n                  {value.count}\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nAverages.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n  years: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Averages;\n","export function groupByMonth(weights) {\n  const byMonth = weights.reduce((byMonth, weight) => {\n    const date = new Date(weight.time);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const monthLabel = `0${month}`.slice(0, 2);\n    const label = `${year}_${monthLabel}`;\n\n    if (!byMonth[label]) {\n      byMonth[label] = {\n        year,\n        month,\n        weights: [],\n      };\n    }\n    byMonth[label].weights = [...byMonth[label].weights, weight];\n    return byMonth;\n  }, {});\n\n  return Object.values(byMonth);\n}\n\nexport function computeAverages(months) {\n  return months.map((month) => {\n    const sum = month.weights.reduce((sum, weight) => sum + parseInt(weight.weight, 10), 0);\n    const count = month.weights.length;\n    const average = sum / count;\n    return {\n      ...month,\n      count,\n      average,\n    };\n  });\n}\n\nexport function computeStdDevs(months) {\n  return months.map((month) => {\n    const diffs = month.weights.map((weight) => parseInt(weight.weight, 10) - month.average);\n    const diffsSum = diffs.reduce((sum, diff) => sum + (diff * diff), 0);\n    const stdDev = Math.sqrt(diffsSum / month.count);\n    return {\n      year: month.year,\n      month: month.month,\n      count: month.count,\n      average: month.average,\n      stdDev,\n    };\n  });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Graph.module.css';\n\n\nfunction Weights({ weights }) {\n  return (\n    <section className='graphSection'>\n      <div className={styles.thing}>\n      </div>\n    </section>\n  );\n}\n\nWeights.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Weights;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/WeightInput.module.css';\n\n\nfunction WeightInput({ saveWeight }) {\n  const [value, setValue] = useState('');\n  const date = new Date();\n  const dayOptions = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };\n  const timeOptions = { hour: 'numeric', minute: '2-digit' };\n  const day = date.toLocaleString('en-us', dayOptions);\n  const time = date.toLocaleString('en-us', timeOptions);\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  function handleKeyUp(e) {\n    if (e.keyCode === 13) {\n      saveWeight(value);\n      setValue('');\n    }\n  }\n\n  return (\n    <section className='weightInputSection'>\n      <div className={styles.inputBox}>\n        <div className={styles.label}>\n          Add Current Weight\n        </div>\n        <div className={styles.input}>\n          <div>\n            <input\n              id='yo'\n              type='number'\n              min='0'\n              max='1000'\n              step='0.1'\n              value={value}\n              onChange={handleChange}\n              onKeyUp={handleKeyUp}\n            />\n          </div>\n          <div>\n            <div>{day}</div>\n            <div>{time}</div>\n          </div>\n          <div></div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nWeightInput.propTypes = {\n  saveWeight: PropTypes.func,\n};\n\nexport default WeightInput;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Weights.module.css';\n\n\nfunction Weights({ weights, deleteWeight }) {\n  function buildWeight(value) {\n    const date = new Date(value.time);\n    const dayOptions = { weekday: 'short', day: 'numeric', month: 'short', year: 'numeric' };\n    const timeOptions = { hour: 'numeric', minute: '2-digit' };\n    const day = date.toLocaleString('en-us', dayOptions);\n    const time = date.toLocaleString('en-us', timeOptions);\n\n    return (\n      <Fragment key={value.time}>\n        <div className='weight'>\n          {value.weight}\n        </div>\n        <div className='time'>\n          <div>\n            {day}\n          </div>\n          <div>\n            {time}\n          </div>\n        </div>\n        <div>\n          <button onClick={() => deleteWeight(value.time)}>\n            X\n          </button>\n        </div>\n      </Fragment>\n    );\n  }\n\n  return (\n    <section className='weightsSection'>\n      <div className={styles.box}>\n        <div className={styles.values}>\n          { weights.slice(0).reverse().map((value) => buildWeight(value)) }\n        </div>\n      </div>\n    </section>\n  );\n}\n\nWeights.propTypes = {\n  weights: PropTypes.arrayOf(PropTypes.object),\n  deleteWeight: PropTypes.func,\n};\n\nexport default Weights;\n","import React, { useEffect, useState } from 'react';\nimport { useLocalStorage } from '../utilities/storage';\nimport Averages from './Averages';\nimport Graph from './Graph';\nimport WeightInput from './WeightInput';\nimport Weights from './Weights';\n\n\nfunction averageMonths(weights) {\n  const aves = Array.from(Array(12), () => 0);\n  const counts = Array.from(Array(12), () => 0);\n  weights.forEach((weight) => {\n    aves[weight.month] += parseInt(weight.weight, 10);\n    counts[weight.month]++;\n  });\n  return aves.map((ave, index) => counts[index] === 0 ? 0 : (ave / counts[index]));\n}\n\nfunction stdDevMonths(weights, averages) {\n  const sums = Array.from(Array(12), () => 0);\n  const counts = Array.from(Array(12), () => 0);\n  weights.forEach((weight) => {\n    const diff = parseInt(weight.weight, 10) - averages[weight.month];\n    sums[weight.month] += (diff * diff);\n    counts[weight.month]++;\n  });\n  const y = sums.map((sum, index) => counts[index] === 0 ? 0 : Math.sqrt(sum / counts[index]));\n  return y;\n}\n\nfunction App() {\n  const [weights, setWeights] = useLocalStorage('weights', []);\n  const [years, setYears] = useState([]);\n\n  useEffect(() => {\n    const sortedWeights = weights.sort((a, b) => a.time - b.time);\n    setWeights(sortedWeights);\n\n    const yearsObj = weights.reduce((years, weight) => {\n      const date = new Date(weight.time);\n      const year = date.getFullYear();\n      const month = date.getMonth();\n      if (!years[year]) {\n        years[year] = {\n          year,\n          weights: [],\n        };\n      }\n      years[year].weights.push({ month, weight: weight.weight });\n      return years;\n    }, {});\n    const sorted = Object.values(yearsObj).sort((a, b) => a.year - b.year);\n    const averaged = sorted.map((year) => {\n      const monthAves = averageMonths(year.weights);\n      return {\n        year: year.year,\n        monthAves,\n        monthStdDevs: stdDevMonths(year.weights, monthAves),\n      };\n    });\n    setYears(averaged);\n  }, [weights]);\n\n  function saveWeight(value) {\n    setWeights([...weights, {\n      time: Date.now(),\n      weight: value,\n    }]);\n  }\n\n  function deleteWeight(time) {\n    setWeights(weights.filter((value) => value.time !== time));\n  }\n\n  return (\n    <main className='page'>\n      <WeightInput\n        saveWeight={saveWeight}\n      />\n      <Weights\n        weights={weights}\n        deleteWeight={deleteWeight}\n      />\n      <Averages\n        weights={weights}\n        years={years}\n      />\n      <Graph\n        weights={weights}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  const [value, setValue] = useState(() => {\n    const stored = window.localStorage.getItem(key);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (err) {\n        console.error('localStorage error:', key, stored, err);\n      }\n    }\n    window.localStorage.setItem(key, JSON.stringify(initialValue));\n    return initialValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}